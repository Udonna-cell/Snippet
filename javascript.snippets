# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1?:function_name}(${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
regex /((=)\s*|(:)\s*|(\()|\b)/f/(\))?/
snippet f
	function${M1?: ${1:functionName}}($2) {
		${0}
	}${M2?;}${M3?,}${M4?)}
# Immediate function
trigger \(?f\(
endTrigger \)?
snippet f(
	(function(${1}) {
		${0:/* code */}
	}(${1}));
# if
snippet if
	if (${1:true}) {
		${0}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${0}
	}
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}

# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${0:/* code */}
	}
# try
snippet try
	try {
		${0:/* code */}
	} catch (e) {}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
regex /([,{[])|^\s*/:f/
	${1:method_name}: function(${2:attribute}) {
		${0}
	}${3:,}
# Timer functions
snippet setTimeout
regex /\b/st|timeout|setTimeo?u?t?/
	setTimeout(function() {${2}}, ${1:10});
snippet setInterval
	setInterval(function() {${2}}, ${1:10});
# Get Elements
snippet gett
	getElementsBy${1:TagName}('${2}')${3}
snippet query
	querySelector("${1}")
# Get Element
snippet get
	getElementBy${1:Id}('${2}')${3}
snippet queryAll
	querySelectorAll("${1}")
# eventlistener
snippet addeventlistener
	addEventListener("${1:click}", ${2})
# console.log (Firebug)
snippet cl
	console.log(${1});
snippet log
	console.log(${1:log})
# return
snippet ret
	return ${1:result}
# hasOwnProperty
snippet has
	hasOwnProperty(${1})
# docstring
snippet /**
	/**
	 * ${1:description}
	 *
	 */
snippet @par
regex /^\s*\*\s*/@(para?m?)?/
	param {${1:type}} ${2:name} ${3:description}
snippet @ret
	returns {${1:type}} ${2:description}
# JSON.parse
snippet jsonp
	JSON.parse(${1:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${1:object});
# self-defining function
snippet sdf
	var ${1:function_name} = function(${2:argument}) {
		${3:// initial code ...}

		$1 = function($2) {
			${4:// main code}
		};
	}
# singleton
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};
		
		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${3:// code ...}

		return instance;
	}
# class
snippet class
regex /^\s*/clas{0,2}/
	class ${1:Name}{
		$0
	}
snippet constructor
	constructor(${1}){
		this.$1 = $1;
	}
snippet method
	${1:name}(${2:args}) {
		${0}
	}
snippet this.
	this.${1} = $1;
# 
snippet for-
	for (let ${1:i} = ${2:Things}.length; ${1:i}--; ) {
		${0:${2:Things}[${1:i}];}
	}
# for (...) {...}
snippet for
	for (let ${1:i} = 0; $1 < ${2:Things}.length; $1++) {
		${3:$2[$1]}$0
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (let ${1:i} = ${2:Things}.length - 1; $1 >= 0; $1--) {
		${3:$2[$1]}$0
	}
# for (property in object ) { ... }
snippet fori
	for (let ${1:prop} in ${2:Things}) {
		${0:$2[$1]}
	}

#modules
snippet def
	define(function(require, exports, module) {
	"use strict";
	const ${1/.*\///} = require("${1}");
	
	});
snippet req
guard ^\s*
	const ${1/.*\///} = require("${1}");
	$0
snippet requ
guard ^\s*
	const ${1/.*\/(.)/\u$1/} = require("${1}").${1/.*\/(.)/\u$1/};
	$0
snippet prom
	new Promise((resolve, reject) => {
		$1
	});

















# Node.js Built-in Modules
# Node.js has a set of built-in modules which you can use without any further installation.
# Here is a list of the built-in modules of Node.js version 6.10.3:

# Module	Description
snippet assert Module
	const assert = require('assert');


snippet buffer Module
	const buffer = require('buffer');
snippet node-buffer-create
	// Creating a Buffer
	const buffer = Buffer.alloc(${1:size}, '${2:encoding}');
	console.log('Buffer:', buffer);
snippet node-buffer-write
	// Writing to a Buffer
	const buffer = Buffer.alloc(${1:size});
	buffer.write('${2:data}', '${3:encoding}');
	console.log('Buffer after writing:', buffer);
snippet node-buffer-read
	// Reading from a Buffer
	const buffer = Buffer.from('${1:data}', '${2:encoding}');
	const bytesRead = buffer.readUInt${3:Bits}LE(${4:offset});
	console.log('Bytes read from buffer:', bytesRead);
snippet node-buffer-concat
	// Concatenating Buffers
	const buffer1 = Buffer.from('${1:data1}', '${2:encoding}');
	const buffer2 = Buffer.from('${3:data2}', '${4:encoding}');
	const concatenatedBuffer = Buffer.concat([buffer1, buffer2]);
	console.log('Concatenated Buffer:', concatenatedBuffer);
snippet node-buffer-length
	// Checking Buffer size
	const buffer = Buffer.from('${1:data}', '${2:encoding}');
	const bufferLength = buffer.length;
	console.log('Buffer length:', bufferLength);


snippet child_process Module
	const child_process = require('child_process');
snippet cluster Module
	const cluster = require('cluster');
snippet crypto Module
	const crypto = require('crypto');
snippet dgram Module
	const dgram = require('dgram');
snippet dns Module
	const dns = require('dns');
snippet domain Module
	const domain = require('domain');


# events
snippet events Module
	const events = require('events');
snippet addListener()	Method
	events.addListener()
snippet defaultMaxListeners	Method
	events.defaultMaxListeners
snippet emit()	Method
	events.emit()
snippet eventNames()	Method
	events.eventNames()
snippet getMaxListeners()	Method
	events.getMaxListeners()
snippet listenerCount()	Method
	events.listenerCount()
snippet listeners()	Method
	events.listeners()
snippet on()	Method
	events.on()
snippet once()	Method
	events.once()
snippet prependListener()	Methodu
	events.prependListener()
snippet prependOnceListener()	Method
	events.prependOnceListener()
snippet removeAllListeners()	Method
	events.removeAllListeners()
snippet removeListener()	Method
	events.removeListener()
snippet setMaxListeners()	Method
	events.setMaxListeners()


# fs
snippet fs Module
	const fs = require('fs');
snippet fs.access()	Method
	fs.access()
snippet fs.accessSync()	Method
	fs.accessSync()
snippet fs.appendFile()	Method
	fs.appendFile()
snippet fs.appendFileSync()	Method
	fs.appendFileSync()
snippet fs.chmod()	Method
	fs.chmod()
snippet fs.chmodSync()	Method
	fs.chmodSync()
snippet fs.chown()	Method
	fs.chown()
snippet fs.chownSync()	Method
	fs.chownSync()
snippet fs.close()	Method
	fs.close()
snippet fs.closeSync()	Method
	fs.closeSync()
snippet fs.constants	Method
	fs.constants
snippet fs.createReadStream()	Method
	fs.createReadStream()
snippet fs.createWriteStream()	Method
	fs.createWriteStream()
snippet fs.exists()	Method
	fs.exists()
snippet fs.existsSync()	Method
	fs.existsSync()
snippet fs.fchmod()	Method
	fs.fchmod()
snippet fs.fchmodSync()	Method
	fs.fchmodSync()
snippet fs.fchown()	Method
	fs.fchown()
snippet fs.fchownSync()	Method
	fs.fchownSync()
snippet fs.fdatasync()	Method
	fs.fdatasync()
snippet fs.fdatasyncSync()	Method
	fs.fdatasyncSync()
snippet fs.fstat()	Method
	fs.fstat()
snippet fs.fstatSync()	Method
	fs.fstatSync()
snippet fs.fsync()	Method
	fs.fsync()
snippet fs.fsyncSync()	Method
	fs.fsyncSync()
snippet fs.ftruncated()	Method
	fs.ftruncated()
snippet fs.ftruncatedSync()	Method
	fs.ftruncatedSync()
snippet fs.futimes()	Method
	fs.futimes()
snippet fs.futimesSync()	Method
	fs.futimesSync()
snippet fs.lchmod()	Method
	fs.lchmod()
snippet fs.lchmodSync()	Method
	fs.lchmodSync()
snippet fs.lchown()	Method
	fs.lchown()
snippet fs.lchownSync()	Method
	fs.lchownSync()
snippet fs.link()	Method
	fs.link()
snippet fs.linksync()	Method
	fs.linksync()
snippet fs.lstat()	Method
	fs.lstat()
snippet fs.lstatSync()	Method
	fs.lstatSync()
snippet fs.mkdir()	Method
	fs.mkdir()
snippet fs.mkdirSync()	Method
	fs.mkdirSync()
snippet fs.mkdtemp()	Method
	fs.mkdtemp()
snippet fs.mkdtempSync()	Method
	fs.mkdtempSync()
snippet fs.open()	Method
	fs.open()
snippet fs.openSync()	Method
	fs.openSync()
snippet fs.read()	Method
	fs.read()
snippet fs.readdir()	Method
	fs.readdir()
snippet fs.readdirSync()	Method
	fs.readdirSync()
snippet fs.readFile()	Method
	fs.readFile()
snippet fs.readFileSync()	Method
	fs.readFileSync()
snippet fs.readlink()	Method
	fs.readlink()
snippet fs.readlinkSync()	Method
	fs.readlinkSync()
snippet fs.realpath()	Method
	fs.realpath()
snippet fs.realpathSync()	Method
	fs.realpathSync()
snippet fs.rename()	Method
	fs.rename('${1:/tmp/hello}', '${2:/tmp/world}', (err) => {
		if (err) throw err;
		console.log('${3:renamed complete}');
	});
snippet fs.renameSync()	Method
	fs.renameSync('${1:/tmp/hello}', '${2:/tmp/world}')
snippet fs.rmdir()	Method
	fs.rmdir()
snippet fs.rmdirSync()	Method
	fs.rmdirSync()
snippet fs.stat()	Method
	fs.stat()
snippet fs.statSync()	Method
	fs.statSync()
snippet fs.symlink()	Method
	fs.symlink()
snippet fs.symlinkSync()	Method
	fs.symlinkSync()
snippet fs.truncate()	Method
	fs.truncate()
snippet fs.truncateSync()	Method
	fs.truncateSync()
snippet fs.unlink()	Method
	fs.unlink('${1:/tmp/hello}', (err) => {
		if (err) throw err;
		console.log('${2:successfully deleted /tmp/hello}');
	});
snippet fs.unlinkSync()	Method
	fs.unlinkSync('${1:/tmp/hello}')
snippet fs.unwatchFile()	Method
	fs.unwatchFile()
snippet fs.utimes()	Method
	fs.utimes()
snippet fs.utimesSync()	Method
	fs.utimesSync()
snippet fs.watch()	Method
	fs.watch()
snippet fs.watchFile()	Method
	fs.watchFile()
snippet fs.write()	Method
	fs.write()
snippet fs.writeFile()	Method
	fs.writeFile()
snippet fs.writeFileSync()	Method
	fs.writeFileSync()
snippet fs.writeSync()	Method
	fs.writeSync()
	





# http
snippet http Module
	const http = require('http');
snippet http.createClient() Method
	http.createClient()
snippet http.createServer()	Method
	http.createServer(function (req, res) {
		res.writeHead(200, {'Content-Type': 'text/plain'});
		res.write('Hello World!');
		res.end();
	}).listen(8080);
snippet http.get()	Method
	http.get()
snippet http.globalAgent	Method
	http.globalAgent
snippet http.request()	Method
	http.request()









snippet https Module
	const https = require('https');
snippet net Module
	const net = require('net');



# os
snippet os Module
	const os = require('os');
snippet os.arch()
	os.arch()
snippet os.cpus()
	os.cpus()
snippet os.endianness()
	os.endianness()
snippet os.freemem()
	os.freemem()
snippet os.homedir()
	os.homedir()
snippet os.hostname()
	os.hostname()
snippet os.loadavg()
	os.loadavg()
snippet os.networkinterfaces()
	os.networkinterfaces()
snippet os.platform()
	os.platform()
snippet os.release()
	os.release()
snippet os.tmpdir()
	os.tmpdir()
snippet os.totalmem()
	os.totalmem()
snippet os.type()
	os.type()
snippet os.uptime()
	os.uptime()
snippet os.userinfo([options])
	os.userinfo(${1:[options]})



# path
snippet path Module
	const path = require('path');
snippet node-path-join
	// Joining path segments using path.join
	const joinedPath = path.join('${1:dir}', '${2:file}');
	console.log('Joined path:', joinedPath);
snippet node-path-abs
	// Getting the absolute path using path.resolve
	const absolutePath = path.resolve('${1:relative-path}');
	console.log('Absolute path:', absolutePath);
snippet node-path-dirname
	// Extracting the directory name using path.dirname
	const dirname = path.dirname('${1:path}');
	console.log('Directory name:', dirname);
snippet node-path-basename
	// Extracting the file name using path.basename
	const basename = path.basename('${1:path}');
	console.log('File name:', basename);
snippet node-path-extname
	// Getting the file extension using path.extname
	const extname = path.extname('${1:file}');
	console.log('File extension:', extname);




snippet punycode Module
	const punycode = require('punycode');
snippet querystring Module
	const querystring = require('querystring');




snippet readline Module
	const readline = require('readline');
snippet node-readline-createInterface
	// Creating a Readline interface
	const rl = readline.createInterface({
		input: process.stdin,
		output: process.stdout
	});

	rl.question('${1:Question?}', (answer) => {
		console.log('Answer:', answer);
		rl.close();
	});
snippet node-readline-on
	// Reading lines from an input stream using 'line' event
	const rl = readline.createInterface({
		input: process.stdin,
		output: process.stdout
	});

	rl.on('line', (line) => {
		console.log('Received line:', line);
	});
snippet node-readline-prompt
	// Setting prompt and handling input
	const rl = readline.createInterface({
		input: process.stdin,
		output: process.stdout
	});

	rl.setPrompt('${1:Prompt:} ');
	rl.prompt();

	rl.on('line', (line) => {
		console.log('Entered:', line);
		rl.close();
	});
snippet node-readline-pauseResume
	// Pausing and resuming the input stream
	const rl = readline.createInterface({
		input: process.stdin,
		output: process.stdout
	});

	rl.question('Press Enter to pause, then Enter again to resume:', () => {
		rl.pause();
		console.log('Input stream paused. Type something to resume.');
		rl.resume();
	});
snippet node-readline-close
	// Handling close event
	const readline = require('readline');
	const rl = readline.createInterface({
		input: process.stdin,
		output: process.stdout
	});

	rl.question('${1:Question?}', (answer) => {
		console.log('Answer:', answer);
		rl.close();
	});

	rl.on('close', () => {
		console.log('Readline interface closed.');
	});





snippet stream Module
	const stream = require('stream');
snippet string_decoder Module
	const string_decoder = require('string_decoder');
snippet timers Module
	const timers = require('timers');
snippet tls	Module
	const tls = require('tls');
snippet tty	Module
	const tty = require('tty');
snippet url Module
	const url = require('url');
snippet util Module
	const util = require('util');
snippet v8 Module
	const v8 = require('v8');
snippet vm Module
	const vm = require('vm');
snippet zlib Module
	const zlib = require('zlib');

# globals 
snippet __dirname
	__dirname
snippet __filename
	__filename
snippet Console
	console.
snippet Process
	process
snippet Buffer
	Buffer
# setImmediate(callback[, arg][, ...])
# setInterval(callback, delay[, arg][, ...])
# setTimeout(callback, delay[, arg][, ...])
# clearImmediate(immediateObject)
# clearInterval(intervalObject)
# clearTimeout(timeoutObject)




snippet node-fs-writeFile
	// Writing to a file using fs.writeFile
	fs.writeFile('${1:file-path}', '${2:content}', (err) => {
		if (err) {
			console.error(err);
			return;
		}
		console.log('File written successfully!');
	});
snippet node-fs-readFile
	// Reading a file using fs.readFile
	fs.readFile('${1:file-path}', 'utf8', (err, data) => {
		if (err) {
			console.error(err);
			return;
		}
		console.log('File content:', data);
	});

snippet node-fs-readdir
	// Reading the contents of a directory using fs.readdir
	fs.readdir('${1:directory-path}', (err, files) => {
		if (err) {
			console.error(err);
			return;
		}
		console.log('Files in the directory:', files);
	});
snippet node-fs-stat
	// Retrieving file information using fs.stat
	fs.stat('${1:file-path}', (err, stats) => {
		if (err) {
			console.error(err);
			return;
		}
		console.log('File information:', stats);
	});
snippet node-fs-mkdir
	// Creating a directory using fs.mkdir
	fs.mkdir('${1:directory-path}', { recursive: true }, (err) => {
		if (err) {
			console.error(err);
			return;
		}
		console.log('Directory created successfully!');
	});
snippet node-fs-unlink
	// Deleting a file using fs.unlink
	fs.unlink('${1:file-path}', (err) => {
		if (err) {
			console.error(err);
			return;
		}
		console.log('File deleted successfully!');
	});
snippet node-fs-rmdir
	// Removing a directory using fs.rmdir
	fs.rmdir('${1:directory-path}', (err) => {
		if (err) {
			console.error(err);
			return;
		}
		console.log('Directory removed successfully!');
	});
snippet node-fs-rename
	// Renaming a file using fs.rename
	fs.rename('${1:old-file-path}', '${2:new-file-path}', (err) => {
		if (err) {
			console.error(err);
			return;
		}
		console.log('File renamed successfully!');
	});
snippet node-fs-copyFile
	// Copying a file using fs.copyFile
	fs.copyFile('${1:source-file-path}', '${2:destination-file-path}', (err) => {
		if (err) {
			console.error(err);
			return;
		}
		console.log('File copied successfully!');
	});
snippet node-fs-chmod
	// Changing file permissions using fs.chmod
	fs.chmod('${1:file-path}', ${2:permissions}, (err) => {
		if (err) {
			console.error(err);
			return;
		}
		console.log('File permissions changed successfully!');
	});
snippet node-fs-exists
	// Checking if a file or directory exists using fs.exists
	fs.exists('${1:path}', (exists) => {
		console.log('File or directory exists:', exists);
	});
